{
  "version": 3,
  "sources": [
    "../../verisign/contract.py"
  ],
  "mappings": ";AAiBA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAgBK;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAmB2B;;;AAAjB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAI4B;;AACP;;AAAP;AAFI;AAMlB;AAAA;;AAAA;AA5BH;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main___algopy_default_create@7",
      "stack_out": []
    },
    "6": {
      "op": "pushbytes 0x913c3f41 // method \"attest(byte[])(address,uint64)\"",
      "defined_out": [
        "Method(attest(byte[])(address,uint64))"
      ],
      "stack_out": [
        "Method(attest(byte[])(address,uint64))"
      ]
    },
    "12": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(attest(byte[])(address,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(attest(byte[])(address,uint64))",
        "tmp%2#0"
      ]
    },
    "15": {
      "op": "match main_attest_route@5",
      "stack_out": []
    },
    "19": {
      "op": "err"
    },
    "20": {
      "block": "main_attest_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "22": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "23": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "25": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "26": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "27": {
      "op": "b attest"
    },
    "30": {
      "block": "main___algopy_default_create@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "32": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "36": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "37": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "38": {
      "subroutine": "smart_contracts.verisign.contract.VerisignApp.attest[routing]",
      "params": {},
      "block": "attest",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "41": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "42": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "44": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "45": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "47": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "48": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "50": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "51": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "52": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "53": {
      "op": "extract 2 0",
      "defined_out": [
        "file_hash#0"
      ],
      "stack_out": [
        "file_hash#0"
      ]
    },
    "56": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "file_hash#0"
      ],
      "stack_out": [
        "file_hash#0",
        "0x61"
      ]
    },
    "59": {
      "op": "swap",
      "stack_out": [
        "0x61",
        "file_hash#0"
      ]
    },
    "60": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "61": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "62": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "63": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "65": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#1"
      ]
    },
    "66": {
      "error": "Content already attested",
      "op": "assert // Content already attested",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "67": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "69": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "tmp%1#1"
      ]
    },
    "71": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "reinterpret_Encoded(uint8[32])%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "72": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "new_attestation#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "new_attestation#0"
      ]
    },
    "73": {
      "op": "swap",
      "stack_out": [
        "new_attestation#0",
        "box_prefixed_key%0#0"
      ]
    },
    "74": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "new_attestation#0",
        "new_attestation#0 (copy)"
      ],
      "stack_out": [
        "new_attestation#0",
        "box_prefixed_key%0#0",
        "new_attestation#0 (copy)"
      ]
    },
    "76": {
      "op": "box_put",
      "stack_out": [
        "new_attestation#0"
      ]
    },
    "77": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "new_attestation#0"
      ],
      "stack_out": [
        "new_attestation#0",
        "0x151f7c75"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "new_attestation#0"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "85": {
      "op": "log",
      "stack_out": []
    },
    "86": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "88": {
      "op": "return",
      "stack_out": []
    }
  }
}